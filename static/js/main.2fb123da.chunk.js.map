{"version":3,"sources":["assets/images/no-image.png","assets/images/vakaren.png","assets/images/anonymous.png","assets/images/anonymous-dark.png","assets/images/github.png","store/actions.js","store/reducers/initialState.js","store/reducers/index.js","store/reducers/data.js","store/sagas.js","store/store.js","components/MovieCard/MovieCard.js","components/SearchMovies/SearchMovies.js","components/Logo/Logo.js","components/Authenticate/Authenticate.js","components/Contact/Contact.js","components/Home/Home.js","components/MoviePage/MoviePage.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","getAuthTokenAction","type","getPopularMoviesAction","receivePopularMoviesAction","data","receiveSearchResultAction","receiveRandomMovieSearch","requestSessionId","receiveMovieById","receiveMovieVideos","receiveMoviePosters","getAccountDetails","receiveAccountDetails","getFavList","accountId","getWatchList","receiveFavList","receiveWatchList","resetSearchResults","apiToken","searchResults","results","searchHasResults","isAuthenticated","movieDetails","movieVideos","moviePosters","accountDetails","combineReducers","state","initialState","popularMovies","latestMovieResultId","id","favoriteMovies","userFavList","userWatchList","getPopularMovies","getMovieById","getMovieVideos","getMoviePosters","getMovieSearch","getLatestMovieSearch","addToList","requestApiData","apiKey","process","getAuthToken","fetch","then","response","json","location","window","request_token","catch","error","console","log","action","url","body","JSON","stringify","method","headers","success","session_id","localStorage","setItem","vakaren_session_id","parse","getItem","put","query","page","movieId","listType","responseJSON","favorited","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","reducer","composeWithDevTools","applyMiddleware","run","withRouter","connect","favoritedMovie","get","dispatch","movie","watchlisted","imageLink","poster_path","NoImage","style","backgroundImage","useEffect","className","original_title","release_date","overview","substring","to","onClick","clickHandler","requestSearchResultAction","requestLatestMovieSearch","history","useState","searchTerm","setSearchTerm","userListResultsExists","length","searchResultsExists","data-test","onSubmit","event","preventDefault","encodeURIComponent","trim","placeholder","onChange","target","value","getRandomMovie","Math","floor","random","push","onClickRandomMovieHandler","map","some","listObj","key","Logo","classes","onClickHandler","document","documentElement","addEventListener","eyeMovementAnimation","removeEventListener","querySelectorAll","forEach","e","x","getBoundingClientRect","left","clientWidth","y","top","clientHeight","rot","atan2","pageX","pageY","PI","transform","alt","src","Vakaren","width","Authenticate","sessionInfo","data-position","data-tooltip","Spy","SpyDark","Contact","href","Github","bindActionCreators","search","includes","authorizedToken","params","split","paramsObject","param","posters","movieBackdrops","backdrops","match","title","runtime","tagline","genres","homepage","jumbotronBackgroundStyle","face","rel","genre","name","video","index","frameBorder","allow","allowFullScreen","poster","file_path","App","store","exact","path","component","MoviePage","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2fb123da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.5fb4e99e.png\";","module.exports = __webpack_public_path__ + \"static/media/vakaren.2582dbc8.png\";","module.exports = __webpack_public_path__ + \"static/media/anonymous.30a0a053.png\";","module.exports = __webpack_public_path__ + \"static/media/anonymous-dark.29167867.png\";","module.exports = __webpack_public_path__ + \"static/media/github.d22ee372.png\";","export const REQUEST_API_DATA = \"REQUEST_API_DATA\";\nexport const RECEIVE_API_DATA = \"RECEIVE_API_DATA\";\n\nexport const GET_AUTH_TOKEN = 'GET_AUTH_TOKEN';\nexport const RECEIVE_REQUEST_TOKEN = 'RECEIVE_REQUEST_TOKEN';\n\nexport const GET_POPULAR_MOVIES = 'GET_POPULAR_MOVIES';\nexport const RECEIVE_POPULAR_MOVIES = 'RECEIVE_POPULAR_MOVIES';\n\nexport const GET_SEARCH_RESULT = 'GET_SEARCH_RESULT';\nexport const RECEIVE_MOVIE_SEARCH = 'RECEIVE_MOVIE_SEARCH';\n\nexport const GET_LATEST_MOVIE_SEARCH = 'GET_LATEST_MOVIE_SEARCH';\nexport const RECEIVE_LATEST_MOVIE_SEARCH = 'RECEIVE_LATEST_MOVIE_SEARCH';\n\nexport const REQUEST_SESSION_ID = 'REQUEST_SESSION_ID';\nexport const RECEIVE_SESSION_ID = 'RECEIVE_SESSION_ID';\n\nexport const GET_MOVIE_BY_ID = 'GET_MOVIE_BY_ID';\nexport const RECEIVE_MOVIE_BY_ID = 'RECEIVE_MOVIE_BY_ID';\n\nexport const GET_MOVIE_VIDEOS = 'GET_MOVIE_VIDEOS';\nexport const RECEIVE_MOVIE_VIDEOS = 'RECEIVE_MOVIE_VIDEOS';\n\nexport const GET_MOVIE_POSTERS = 'GET_MOVIE_POSTERS';\nexport const RECEIVE_MOVIE_POSTERS = 'RECEIVE_MOVIE_POSTERS';\n\nexport const GET_ACCOUNT_DETAILS = 'GET_ACCOUNT_DETAILS';\nexport const RECEIVE_ACCOUNT_DETAILS = 'RECEIVE_ACCOUNT_DETAILS';\n\nexport const ADD_TO_LIST = 'ADD_TO_LIST';\nexport const ADD_TO_LIST_RESPONSE = 'ADD_TO_LIST_RESPONSE';\n\nexport const ADD_TO_WATCHLIST = 'ADD_TO_WATCHLIST';\nexport const ADD_TO_WATCHLIST_RESPONSE = 'ADD_TO_WATCHLIST_RESPONSE';\n\nexport const ADD_TO_FAVORITELIST = 'ADD_TO_FAVORITELIST';\nexport const ADD_TO_FAVORITELIST_RESPONSE = 'ADD_TO_FAVORITELIST_RESPONSE';\n\nexport const GET_FAV_LIST = 'GET_FAV_LIST';\nexport const RECEIVE_FAV_LIST = 'RECEIVE_FAV_LIST';\n\nexport const GET_WATCH_LIST = 'GET_WATCH_LIST';\nexport const RECEIVE_WATCH_LIST = 'RECEIVE_WATCH_LIST';\n\nexport const RESET_SEARCH_RESULTS = 'RESET_SEARCH_RESULTS'; \n\nexport const requestApiDataAction = () => ({ type: REQUEST_API_DATA });\nexport const receiveApiDataAction = data => ({ type: RECEIVE_API_DATA, data });\n\nexport const getAuthTokenAction = () => ({ type: GET_AUTH_TOKEN });\nexport const receiveRequestTokenAction = data => ({ type: RECEIVE_REQUEST_TOKEN, data });\n\nexport const getPopularMoviesAction = () => ({ type: GET_POPULAR_MOVIES });\nexport const receivePopularMoviesAction = data => ({ type: RECEIVE_POPULAR_MOVIES, data });\n\nexport const requestSearchResultAction = (query, page) => ({ type: GET_SEARCH_RESULT, query, page }); \nexport const receiveSearchResultAction = data => ({ type: RECEIVE_MOVIE_SEARCH, data }); \n\nexport const requestLatestMovieSearch = () => ({ type: GET_LATEST_MOVIE_SEARCH });\nexport const receiveRandomMovieSearch = data => ({ type: RECEIVE_LATEST_MOVIE_SEARCH, data});\n\nexport const requestSessionId = data => ({ type: REQUEST_SESSION_ID, data });\n\nexport const getMovieById = id => ({ type: GET_MOVIE_BY_ID, id });\nexport const receiveMovieById = data => ({ type: RECEIVE_MOVIE_BY_ID, data });\n\nexport const getMovieVideos = id => ({ type: GET_MOVIE_VIDEOS, id });\nexport const receiveMovieVideos = data => ({ type: RECEIVE_MOVIE_VIDEOS, data });\n\nexport const getMoviePosters = id => ({ type: GET_MOVIE_POSTERS, id });\nexport const receiveMoviePosters = data => ({ type: RECEIVE_MOVIE_POSTERS, data });\n\nexport const getAccountDetails = () => ({ type: GET_ACCOUNT_DETAILS});\nexport const receiveAccountDetails = data => ({ type: RECEIVE_ACCOUNT_DETAILS, data });\n\nexport const addToList = (movieId, accountId, listType) => ({ type: ADD_TO_LIST, movieId, accountId, listType });\nexport const addToListResponse = data => ({ type: ADD_TO_LIST_RESPONSE, data });\n\nexport const getFavList = accountId => ({ type: GET_FAV_LIST, accountId });\nexport const getWatchList = accountId => ({ type: GET_WATCH_LIST, accountId });\nexport const receiveFavList = data => ({ type: RECEIVE_FAV_LIST, data });\nexport const receiveWatchList = data => ({ type: RECEIVE_WATCH_LIST, data });\n\n\nexport const resetSearchResults = () => ({ type: RESET_SEARCH_RESULTS })\n\nexport const addedToFavorites = data => ({type: ADD_TO_LIST_RESPONSE, data})","export default {\n    apiToken: {},\n    searchResults: {\n        results: [],\n    },\n    searchHasResults: false,\n    isAuthenticated: false,\n    movieDetails: {},\n    movieVideos: {},\n    moviePosters: {},\n    accountDetails: {},\n};\n","import { combineReducers } from \"redux\";\n\nimport data from \"./data\";\n\nexport default combineReducers({\n  data\n});\n","import { \n  RECEIVE_API_DATA,\n  RECEIVE_REQUEST_TOKEN,\n  RECEIVE_POPULAR_MOVIES,\n  RECEIVE_MOVIE_SEARCH,\n  RECEIVE_LATEST_MOVIE_SEARCH,\n  REQUEST_SESSION_ID,\n  RECEIVE_MOVIE_BY_ID,\n  RECEIVE_MOVIE_VIDEOS,\n  RECEIVE_MOVIE_POSTERS,\n  RECEIVE_ACCOUNT_DETAILS,\n  RECEIVE_FAV_LIST,\n  RECEIVE_WATCH_LIST,\n  RESET_SEARCH_RESULTS,\n  ADD_TO_LIST_RESPONSE\n} from \"../actions\";\n\nimport initialState from './initialState';\n\nexport default (state = initialState, { type, data }) => {\n  switch (type) {\n    case RECEIVE_REQUEST_TOKEN:\n      return {\n        ...state,\n        apiToken: data\n      };\n    //to be added in the future\n    case RECEIVE_POPULAR_MOVIES: \n      return {\n        ...state,\n        popularMovies: data\n      };\n    case RECEIVE_MOVIE_SEARCH: \n      return {\n        ...state,\n        searchResults: data\n      };\n    case RECEIVE_LATEST_MOVIE_SEARCH: \n      return {\n        ...state,\n        latestMovieResultId: data.id\n      };\n    case REQUEST_SESSION_ID:\n      return {\n        ...state,\n        isAuthenticated: data ? true : false\n      };\n    case RECEIVE_MOVIE_BY_ID: \n      return {\n        ...state,\n        movieDetails: data\n      };\n    case ADD_TO_LIST_RESPONSE:\n      return {\n        ...state,\n        favoriteMovies: {\n          ...state.favoriteMovies,\n          data\n        }\n      }\n    case RECEIVE_API_DATA: \n      return {\n        ...state,\n        movieDetails: data\n      };\n    case RECEIVE_MOVIE_VIDEOS:\n      return {\n        ...state,\n        movieVideos: data\n      };\n    case RECEIVE_MOVIE_POSTERS:\n      return {\n        ...state,\n        moviePosters: data\n      };\n    case RECEIVE_ACCOUNT_DETAILS: \n      return {\n        ...state,\n        accountDetails: data\n      };\n    case RECEIVE_FAV_LIST: \n      return {\n        ...state,\n        userFavList: data\n      }\n    case RECEIVE_WATCH_LIST: \n      return {\n        ...state,\n        userWatchList: data\n      }  \n    case RESET_SEARCH_RESULTS:\n      return {\n        ...state,\n        searchResults: initialState.searchResults\n      }\n    default:\n      return state;\n  }\n};\n","import { put, takeEvery } from \"redux-saga/effects\";\nimport { \n  GET_AUTH_TOKEN, \n  GET_POPULAR_MOVIES, \n  GET_SEARCH_RESULT, \n  GET_LATEST_MOVIE_SEARCH,\n  REQUEST_SESSION_ID,\n  GET_MOVIE_BY_ID,\n  GET_MOVIE_VIDEOS,\n  GET_MOVIE_POSTERS,\n  GET_ACCOUNT_DETAILS,\n  ADD_TO_LIST,\n  GET_FAV_LIST,\n  GET_WATCH_LIST,\n  receiveSearchResultAction,  \n  receiveRandomMovieSearch, \n  receivePopularMoviesAction,\n  receiveMovieById,\n  receiveMovieVideos,\n  receiveMoviePosters,\n  receiveAccountDetails,\n  addToListResponse,\n  receiveWatchList,\n  receiveFavList,\n } from \"./actions\";\n\nconst apiKey = process.env.REACT_APP_API_KEY; \n\n//authentication\nexport const getAuthToken = () => {\n  fetch(`https://api.themoviedb.org/3/authentication/token/new?api_key=${apiKey}`)\n      .then(response => response.json())\n      .then(response => {\n          const location = window.location;\n          const { request_token } = response;\n          window.location = `https://www.themoviedb.org/authenticate/${request_token}?redirect_to=${location}`;\n      })\n      .catch(error => console.log(error));\n};\n\nexport const requestSessionId = (action) => {\n  // after the user allows the request_token, get the new session_id using that token\n  const url = `https://api.themoviedb.org/3/authentication/session/new?api_key=${apiKey}`;\n  const body = JSON.stringify({\n      \"request_token\": action.data\n  });\n\n\n  fetch(url, {\n      method: 'POST',\n      body: body,\n      headers: {\n          'Content-Type': 'application/json'\n      }\n  })\n      .then(response => response.json())\n      .then(response => {\n          const { success, session_id } = response;\n          if (success) {\n              localStorage.setItem('vakaren_session_id', JSON.stringify({ session_id }));\n          }\n        })\n      .catch(error => console.log(error));\n};\n\nexport function* getAccountDetails() {\n  const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/account?api_key=${apiKey}&session_id=${vakaren_session_id.session_id}`)\n    const data = yield response.json();\n    yield put(receiveAccountDetails(data));\n  } catch (e) {\n      console.log(e);\n  }\n}\n\nexport function* getPopularMovies(action) {\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`)\n    const data = yield response.json();\n    yield put(receivePopularMoviesAction(data));\n  } catch (e) {\n      console.log(e); // Just log it for now\n  }\n}\n\nexport function* getMovieById (action) {\n  try {    \n    const response = yield fetch(`https://api.themoviedb.org/3/movie/${action.id}?api_key=${apiKey}`);\n    const data = yield response.json();\n    yield put(receiveMovieById(data));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport function* getMovieVideos (action) {\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/movie/${action.id}/videos?api_key=${apiKey}&language=en-US`);\n    const data = yield response.json();\n    yield put(receiveMovieVideos(data));\n  } catch(e) {\n    console.log(e);\n  }\n};\n\nexport function* getMoviePosters (action) {\n  try {\n    const response = yield fetch(`https://api.themoviedb.org/3/movie/${action.id}/images?api_key=${apiKey}&language=en-US&include_image_language=en,null`);\n    const data = yield response.json();\n    yield put(receiveMoviePosters(data));\n  } catch(e) {\n    console.log(e);\n  }\n}\n\nexport function* getMovieSearch(action) {\n  try {\n      const response = yield fetch(`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${action.query}&page=${action.page}&include_adult=false`);\n      const data = yield response.json();\n      yield put(receiveSearchResultAction(data));\n  } catch (e) {\n      console.log(e);\n  }\n}\n\n\nexport function* getLatestMovieSearch() {\n  try {\n    // do api call\n    const response = yield fetch(`https://api.themoviedb.org/3/movie/latest?api_key=${apiKey}&language=en-US`);\n    const data = yield response.json();\n    yield put(receiveRandomMovieSearch(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* addToList({accountId, movieId, listType, type}) {\n\n  try {\n    const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n    const url = `https://api.themoviedb.org/3/account/${accountId}/${listType}?api_key=${apiKey}&session_id=${vakaren_session_id.session_id}`;\n\n    const body = JSON.stringify({\n        \"media_type\": \"movie\",\n        \"media_id\": movieId,\n        [listType]: true\n      });\n  \n      const response = yield fetch(url, {\n        method: 'POST',\n        body: body,\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n      });\n\n      const responseJSON = yield response.json();\n\n      const { success } = responseJSON;\n\n      if (success) {\n        yield put(addToListResponse(\n          {\n            movieId,\n            favorited: true\n          }\n        ));\n      } else {\n          // good to add messages for the user why it failed; according to the status_code that is returned\n          console.log('Action failed');\n      }\n  } catch(error){\n    console.log(error)\n  }\n}\n\nexport function* getFavList({accountId}) {\n  const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n  try {\n    // do api call\n    const response = yield fetch(`https://api.themoviedb.org/3/account/${accountId}/favorite/movies?api_key=${apiKey}&language=en-US&session_id=${vakaren_session_id.session_id}&sort_by=created_at.asc&page=1`);\n    const data = yield response.json();\n    yield put(receiveFavList(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* getWatchList({accountId}) {\n  const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n  try {\n    // do api call\n    const response = yield fetch(`https://api.themoviedb.org/3/account/${accountId}/watchlist/movies?api_key=${apiKey}&language=en-US&session_id=${vakaren_session_id.session_id}&sort_by=created_at.asc&page=1`);\n    const data = yield response.json();\n    yield put(receiveWatchList(data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n\n\nexport default function* requestApiData() {\n  yield takeEvery( GET_AUTH_TOKEN, getAuthToken );\n  yield takeEvery( GET_POPULAR_MOVIES, getPopularMovies );\n  yield takeEvery( GET_SEARCH_RESULT, getMovieSearch );\n  yield takeEvery( GET_LATEST_MOVIE_SEARCH, getLatestMovieSearch );\n  yield takeEvery( REQUEST_SESSION_ID, requestSessionId);\n  yield takeEvery( GET_MOVIE_BY_ID, getMovieById );\n  yield takeEvery( GET_MOVIE_VIDEOS, getMovieVideos );\n  yield takeEvery( GET_MOVIE_POSTERS, getMoviePosters ); \n  yield takeEvery( GET_ACCOUNT_DETAILS, getAccountDetails );\n  yield takeEvery( ADD_TO_LIST, addToList );\n  yield takeEvery( GET_FAV_LIST, getFavList );\n  yield takeEvery( GET_WATCH_LIST, getWatchList );\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nimport reducer from \"./reducers\";\nimport requestApiData from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\n  sagaMiddleware.run(requestApiData);\n","import React, {useEffect} from 'react';\nimport { Link } from 'react-router-dom'\nimport { addToList, getAccountDetails, getWatchList, getFavList } from './../../store/actions'\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom'\nimport { get } from 'lodash';\nimport NoImage from './../../assets/images/no-image.png'\nimport './MovieCard.scss';\n\nconst MovieCard = ({movie, addToList, accountId, favorited, watchlisted, getWatchList, getFavList, favoritedMovie}) => {\n    const imageLink = movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : NoImage;\n\n    const style = {\n      backgroundImage: `url(${imageLink})`\n    }\n\n    const clickHandler = (id, accountId, type) => {\n      isAuthenticated && addToList(id, accountId, type);\n    }\n\n    const isAuthenticated = JSON.parse(localStorage.getItem('vakaren_session_id'));\n\n    useEffect(() => {\n      isAuthenticated && getFavList(accountId);\n      isAuthenticated && getWatchList(accountId);\n      /* eslint-disable */\n    }, [])\n\n    return (\n        <div className=\"col s12 m6\">\n            <div className=\"movie-card\" style={style}>\n              <div className=\"movie-card-overlay\"></div>\n              <div className=\"movie-card-right-side\">\n                <h2 className=\"card-title\">{movie.original_title}</h2>\n                <span className=\"card-date\">{movie.release_date}</span>\n                <span className=\"card-description\">{movie.overview.substring(0,150)}...</span>\n                <Link to={`/movie/${movie.id}`} className=\"btn btn-outline movie-card__button\"> Details </Link>\n              </div>\n              <div className=\"movie-card-actions\">\n              {\n                isAuthenticated && <div className=\"card-buttons\">\n                    <i className={`large material-icons white-text fav-or-watch ${watchlisted ? 'watchlist' : '' }`} onClick={() => clickHandler(movie.id, accountId, 'watchlist')}>access_time</i>\n                    <i className={`large material-icons white-text fav-or-watch ${favorited ? 'fav' : '' }`} onClick={() => addToList(movie.id, accountId, 'favorite')}>favorite</i>\n                </div>\n              }\n              </div>\n            </div>\n        </div>\n        )\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      addToList: (movieId, accountId, listType) => dispatch(addToList(movieId, accountId, listType)),\n      getAccountDetails: () => dispatch(getAccountDetails()),\n      getFavList: (accountId) => dispatch(getFavList(accountId)),\n      getWatchList: (accountId) => dispatch(getWatchList(accountId)),\n  }\n};\n\nconst mapStateToProps = state => ({ \n  favoritedMovie: get(state, 'data.favoriteMovies.data.movieId', '') \n});\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MovieCard));\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom'\nimport { get } from 'lodash';\nimport { \n    requestSearchResultAction,\n    requestLatestMovieSearch,\n    getAccountDetails,\n    getFavList,\n    getWatchList,\n    resetSearchResults\n} from \"../../store/actions\";\nimport MovieCard from '../MovieCard/MovieCard';\nimport './SearchMovies.scss';\n\nconst SearchMovies = ({\n    history,\n    accountDetails,\n    requestSearchResultAction,\n    requestLatestMovieSearch,\n    searchResults,\n    getFavList,\n    getWatchList,\n    getAccountDetails,\n    latestMovieResultId,\n    resetSearchResults,\n    userFavList,\n    userWatchList\n}) => {\n\n    const [ searchTerm, setSearchTerm ] = useState('');\n\n    const vakaren_session_id = JSON.parse(localStorage.getItem('vakaren_session_id'));\n\n    useEffect(() => {\n        vakaren_session_id && getAccountDetails();\n        requestLatestMovieSearch();\n        return () => {\n            resetSearchResults();            \n          };\n          /* eslint-disable */\n    }, []);\n\n    useEffect(() => {\n        vakaren_session_id && getFavList(accountDetails.id, 'favorite');\n        vakaren_session_id && getWatchList(accountDetails.id, 'watchlist');\n    }, []);\n    \n    const handleSubmit = event => {\n        event.preventDefault();\n        const query = encodeURIComponent(searchTerm.trim());\n        if (query === '') return;\n        requestSearchResultAction(query, 1);\n    }\n\n    const onClickRandomMovieHandler = () => {\n        const getRandomMovie = Math.floor(Math.random() * latestMovieResultId) + 1 \n        history.push(`/movie/${getRandomMovie}`)\n    } \n\n    const handleChange = event => {\n        setSearchTerm(event.target.value);\n    };\n\n    const userListResultsExists = userFavList.length > 0 && userWatchList.length > 0;\n    const searchResultsExists = searchResults && searchResults.length > 0;\n\n    return (\n        <>\n            <div className=\"input-field col s12 searchbar\">\n            <form data-test=\"component-search-form\" onSubmit={handleSubmit}>\n\n                <input placeholder=\"Type a movie name....\" id=\"search\" type=\"text\" className=\"validate\"  onChange={handleChange}/>\n                <div className=\"buttons-container\">\n                    <button type=\"submit\" className=\"waves-effect waves-light btn light-blue\">\n                        Search\n                    </button>            \n                    <span type=\"submit\" className=\"waves-effect waves-light btn light-blue\" onClick={() => onClickRandomMovieHandler()}>\n                        I feel lucky\n                    </span>\n                </div>\n            </form>\n            </div>\n            <div className=\"row\">\n                { userListResultsExists && searchResultsExists && searchResults.map(movie => \n                    <MovieCard \n                        watchlisted={userWatchList.some(listObj => listObj.id === movie.id)} \n                        favorited={userFavList.some(listObj => listObj.id === movie.id  )} \n                        accountId={accountDetails.accountId || 0} \n                        movie={movie} \n                        key={movie.id}\n                    /> )\n                }\n                { !vakaren_session_id && searchResults.map(movie => \n                    <MovieCard \n                        movie={movie} \n                        key={movie.id}\n                    /> )\n                }\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => ({ \n    searchResults: get(state, 'data.searchResults.results', []),\n    accountDetails: state.data.accountDetails || {},\n    latestMovieResultId: state.data.latestMovieResultId,\n    userFavList: get(state, 'data.userFavList.results', []),\n    userWatchList: get(state, 'data.userWatchList.results', [])\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        requestSearchResultAction: (query, page) => dispatch(requestSearchResultAction(query, page)),\n        requestLatestMovieSearch: () => dispatch(requestLatestMovieSearch()),\n        getAccountDetails: () => dispatch(getAccountDetails()),\n        getFavList: (accountId) => dispatch(getFavList(accountId)),\n        getWatchList: (accountId) => dispatch(getWatchList(accountId)),\n        resetSearchResults: () => dispatch(resetSearchResults())\n    }\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SearchMovies));\n\n","import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport Vakaren from './../../assets/images/vakaren.png'; \nimport './Logo.scss';\n\nconst Logo = ({classes, onClickHandler}) => {\n    useEffect(() => {\n        document.documentElement.addEventListener('mousemove', eyeMovementAnimation)\n        return () => {\n          document.documentElement.removeEventListener('mousemove', eyeMovementAnimation);\n        }\n      }, [])\n\n      const eyeMovementAnimation = event => {\n        let eye = document.querySelectorAll('.eye');\n        eye.forEach(e => {\n          let x = (e.getBoundingClientRect().left) + (e.clientWidth / 2)\n          let y = (e.getBoundingClientRect().top) + (e.clientHeight / 2)\n          let radian = Math.atan2(event.pageX - x, event.pageY - y)\n          let rot = (radian * (180 / Math.PI) * -1) + 270;\n          e.style.transform = \"rotate(\" + rot + \"deg)\";\n        })\n      }\n\n    return (\n        <div className={`logo-container ${classes}`}>\n          <div className=\"face\">\n            <div className=\"eyes\">\n              <div className=\"eye\"></div>\n              <div className=\"eye\"></div>\n            </div>\n          </div>\n          <Link to=\"/\" onClick={() => { onClickHandler() }}>\n            <img className=\"logo\" alt=\"vakaren\" src={Vakaren} width='270px'/>\n          </Link>\n        </div>\n    )\n}\n\nexport default Logo;\n","import React from 'react'\nimport Spy from './../../assets/images/anonymous.png';\nimport SpyDark from './../../assets/images/anonymous-dark.png';\nimport './Authenticate.scss';\n\nconst Authenticate = ({onClickHandler, isAuthenticated}) => {\n\n    const sessionInfo = isAuthenticated ? 'Authenticated Session' : 'Unauthorized Session';\n    return (\n        <div className={`authorize-image-container ${sessionInfo ? 'authenticated' : 'unauthenticated'}`}>\n            <img className=\"authorize-image\" alt=\"spy\" data-position=\"bottom\" data-tooltip=\"I am a tooltip\" src={sessionInfo ? Spy : SpyDark} onClick={() => { onClickHandler() }}/>\n            <p>{sessionInfo}</p>\n        </div>\n    )}\n\nexport default Authenticate\n","import React from 'react';\nimport Github from './../../assets/images/github.png';\nimport './Contact.scss';\n\nconst Contact = () => {\n    return <div className=\"contact\"><a href=\"https://www.github.com/gokhanipek\"><img alt=\"github\" className=\"contact-image\" src={Github} /></a></div>\n}\n\nexport default Contact;","import React, { useEffect } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom'\nimport { resetSearchResults, getAuthTokenAction, getPopularMoviesAction, requestSessionId, getAccountDetails } from \"../../store/actions\";\nimport SearchMovies from '../SearchMovies/SearchMovies';\nimport Logo from './../Logo/Logo'; \nimport './Home.scss';\nimport Authenticate from \"../Authenticate/Authenticate\";\nimport Contact from \"../Contact/Contact\";\n\nconst Home = ({getAuthTokenAction, location, searchResults, requestSessionId, resetSearchResults}) => {\n  useEffect(() => {\n    const isAuthenticated = location.search.includes('approved=true')\n    const {request_token} = isAuthenticated ? authorizedToken() : {};\n    requestSessionId(request_token);\n\n    /* eslint-disable */\n  }, [])\n\n  const isAuthenticated = JSON.parse(localStorage.getItem('vakaren_session_id'));\n\n\n  const authorizedToken = () => {\n    if(location.search === '') return null;\n    const params = location.search.substring(1).split('&');\n    const paramsObject = {};\n    \n    params.map(param => {\n      const [key, value] = param.split('=');\n      paramsObject[key] = value;\n    })\n\n    return paramsObject;\n  }\n\n\n  const onClickHandler = () => {\n    return isAuthenticated ? null : getAuthTokenAction();\n  }\n\n  const onLogoClickHandler = () => {\n    return resetSearchResults();\n  }\n\n\n  return (\n    <div className=\"container\">\n      <div className={`home-wrapper ${searchResults.length > 0 ? 'top' : 'bottom'}`}>\n          <Authenticate isAuthenticated={isAuthenticated} onClickHandler={onClickHandler} />\n          <Logo onClickHandler={onLogoClickHandler}/>\n          <SearchMovies/>\n          <Contact/>\n      </div>\n    </div>\n    )\n}\n\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({ getAuthTokenAction, getPopularMoviesAction, requestSessionId, getAccountDetails, resetSearchResults }, dispatch);\n\nconst mapStateToProps = state => ({ \n    searchResults: state.data.searchResults.results || [] \n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Home));\n","import React, {useEffect} from 'react';\nimport { connect } from \"react-redux\";\nimport { withRouter } from 'react-router-dom'\nimport { getMovieById, getMovieVideos, getMoviePosters, getAccountDetails, resetSearchResults } from './../../store/actions'\nimport Logo from './../Logo/Logo';\nimport NoImage from './../../assets/images/no-image.png'\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport './MoviePage.scss';\n\n\nconst MoviePage = ({getMovieById, getMovieVideos, match, getMoviePosters, movieDetails, moviePosters, movieVideos, resetSearchResults}) => {\n    useEffect(() => {\n        const {id} = match.params;\n        getMovieById(id);\n        getMovieVideos(id);\n        getMoviePosters(id);\n        /* eslint-disable */\n    }, [])\n\n    const {id, poster_path, title, runtime, tagline, overview, genres, release_date, homepage} = movieDetails;\n   \n    const jumbotronBackgroundStyle = {\n        backgroundImage: poster_path ? `url(https://image.tmdb.org/t/p/w500/${poster_path})` : `url(${NoImage})`\n    }\n\n    const onLogoClickHandler = () => {\n        return resetSearchResults();\n    }\n\n\n    return (\n        <>\n            <Logo face={false} classes={'navbar'} onClickHandler={onLogoClickHandler} />\n            {id ? <div className=\"movie-container\">\n                <div className=\"jumbotron\" style={jumbotronBackgroundStyle}>\n                    <span className=\"jumbotron-overlay\"/>\n                    <div className=\"jumbotron-right-side\">\n                        <p className=\"title\">{title}</p>\n                        {runtime && <p className=\"movie-info runtime\">Runtime: {runtime } mins</p>}\n                        {tagline && <p className=\"movie-info tagline\">Tagline:  {tagline}</p>}\n                        {overview && <p className=\"movie-info overview\">Overview: {overview}</p>}\n                        {homepage && <p className=\"movie-info website\"><a href={homepage} target=\"_blank\" rel=\"noopener noreferrer\">Website</a></p>}\n                        {genres && <p className=\"movie-info genres\">{genres && genres.map(genre => <span key={genre.id} className=\"bubble\">{genre.name}</span>)} </p>}\n                        {release_date && <p className=\"movie-info release-date\">Release Date: {release_date}</p>}\n                    </div>\n                </div>\n                <div className=\"video-container\">\n                    <h3 className=\"carousel-title\">Videos</h3>\n                    {movieVideos && movieVideos.length > 0 ? movieVideos.map((video, index) => \n                        <iframe\n                            className=\"movie-video\"\n                            src={`https://www.youtube.com/embed/${video.key}`}\n                            frameBorder='0'\n                            allow='autoplay; encrypted-media'\n                            allowFullScreen\n                            title='video'\n                            key={index}\n                        />\n                        )\n                    : <div className=\"no-such-movie\"> This movie has no videos available. </div>}\n                </div>\n                <div className=\"image-container\">\n                    <h3 className=\"carousel-title\">Posters</h3>\n                    <div className=\"images\">\n                        {moviePosters && moviePosters.length > 0 ? moviePosters.map((poster, index) => \n                                <img className=\"movie-posters\" alt=\"poster\" key={index} src={`https://image.tmdb.org/t/p/w500${poster.file_path}`} />\n                            )\n                        : <div className=\"no-such-movie\"> This movie has no posters available. </div> }\n                    </div>\n                </div>\n            </div> : <div className=\"no-such-movie\"> <img alt=\"noimage\" src={NoImage} /> There is no such movie. Please go back to search. </div>}\n        </>\n    )\n}\n\nconst mapStateToProps = state => ({ \n    movieDetails: state.data.movieDetails,\n    moviePosters: state.data.moviePosters.posters,\n    movieBackdrops: state.data.moviePosters.backdrops,\n    movieVideos: state.data.movieVideos.results\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getMovieById: id => dispatch(getMovieById(id)),\n        getMovieVideos: id => dispatch(getMovieVideos(id)),\n        getMoviePosters: id => dispatch(getMoviePosters(id)),\n        getAccountDetails: () => dispatch(getAccountDetails()),\n        resetSearchResults: () => dispatch(resetSearchResults())\n    }\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MoviePage));\n\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport store from \"../store/store\";\nimport Home from \"./Home/Home\";\nimport MoviePage from \"./MoviePage/MoviePage\";\n\nconst App = () =>  {\n  return <Provider store={store}>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/movie/:id\" component={MoviePage}/>\n      </Switch>\n    </Router>\n  </Provider>;\n}\n\n  \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}